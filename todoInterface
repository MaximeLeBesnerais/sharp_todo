#!/usr/bin/env python3
import datetime
import json
import sys
import typing
from PyQt5 import QtCore
from PyQt5.QtWidgets import QWidget
import requests
from PyQt5.QtWidgets import *

API_BASE_URL = "http://localhost:1234/API"

class Activity:
    def __init__(self, title, description, due_date, done, id = 0):
        self.id = id
        self.title = title
        self.description = description
        self.due_date = due_date
        self.done = done

    def json(self):
        return {
            "title": self.title,
            "description": self.description,
            "dueDate": self.due_date,
            "done": self.done
        }

class AddActivityDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Add Activity")

        self.title_label = QLabel("Title:")
        self.title_input = QLineEdit()
        self.title_input.textChanged.connect(self.is_empty_activity)

        self.description_label = QLabel("Description:")
        self.description_input = QLineEdit()
        self.description_input.textChanged.connect(self.is_empty_activity)

        self.due_date_label = QLabel("Due Date:")
        self.due_date_input = QDateEdit()
        self.due_date_input.setDate(datetime.date.today())

        self.add_button = QPushButton("Add TODO")
        self.add_button.clicked.connect(self.add_todo)
        self.add_button.setEnabled(False)

        layout = QVBoxLayout()
        layout.addWidget(self.title_label)
        layout.addWidget(self.title_input)
        layout.addWidget(self.description_label)
        layout.addWidget(self.description_input)
        layout.addWidget(self.due_date_label)
        layout.addWidget(self.due_date_input)

        button_layout = QHBoxLayout()
        button_layout.addStretch(1)
        button_layout.addWidget(self.add_button)

        layout.addLayout(button_layout)

        self.setLayout(layout)

    def add_todo(self):
        act: Activity = Activity(self.title_input.text(), self.description_input.text(), self.due_date_input.date().toString("dd-MM-yyyy"), False)

        response = requests.post(f"{API_BASE_URL}/add", json=act.json())
        if response.status_code == requests.codes.CREATED:
            print("TODO added successfully!")
            self.title_input.setText("")
            self.description_input.setText("")
            self.due_date_input.setDate(datetime.date.today())
            self.close()
            return act
        else:
            print("Failed to add TODO.")
    
    def is_empty_activity(self):
        if len(self.title_input.text().strip()) > 0 and len(self.description_input.text().strip()) > 0:
            self.add_button.setEnabled(True)
        else:
            self.add_button.setEnabled(False)

class UpdateActivityDialog(QDialog):
    def __init__(self, parent, activity: Activity):
        super().__init__(parent)
        self.activity = activity
        self.setWindowTitle("Update Activity")
        
        self.title_label = QLabel("Title:")
        self.title_input = QLineEdit()
        self.title_input.setText(activity.title)
        self.title_input.textChanged.connect(self.has_changed)
        
        self.description_label = QLabel("Description:")
        self.description_input = QLineEdit()
        self.description_input.setText(activity.description)
        self.description_input.textChanged.connect(self.has_changed)
        
        self.due_date_label = QLabel("Due Date:")
        self.due_date_input = QDateEdit()
        self.due_date_input.setDate(datetime.datetime.strptime(activity.due_date, "%d-%m-%Y").date())
        
        self.done_label = QLabel("Done:")
        self.done_input = QCheckBox()
        self.done_input.setChecked(activity.done)
        
        self.update_button = QPushButton("Update TODO")
        self.update_button.clicked.connect(self.update_todo)
        self.update_button.setEnabled(False)
        
        layout = QVBoxLayout()
        layout.addWidget(self.title_label)
        layout.addWidget(self.title_input)
        layout.addWidget(self.description_label)
        layout.addWidget(self.description_input)
        layout.addWidget(self.due_date_label)
        layout.addWidget(self.due_date_input)
        layout.addWidget(self.done_label)
        layout.addWidget(self.done_input)
        
        button_layout = QHBoxLayout()
        button_layout.addStretch(1)
        button_layout.addWidget(self.update_button)
        
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
    def update_todo(self):
        new_act: Activity = Activity(self.title_input.text(), self.description_input.text(), self.due_date_input.date().toString("dd-MM-yyyy"), self.done_input.isChecked(), self.activity.id)
        response = requests.put(f"{API_BASE_URL}/update/", json=new_act.json())
        if response.status_code == requests.codes.OK:
            print("TODO updated successfully!")
            self.close()
            return new_act
        else:
            print("Failed to update TODO.")
        
    def has_changed(self):
        if self.title_input.text() != self.activity.title or self.description_input.text() != self.activity.description or self.due_date_input.date().toString("dd-MM-yyyy") != self.activity.due_date or self.done_input.isChecked() != self.activity.done:
            self.update_button.setEnabled(True)
        else:
            self.update_button.setEnabled(False)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("TODO App")

        self.get_activities_button = QPushButton("Get Activities")
        self.get_activities_button.clicked.connect(self.get_activities)

        self.activities_list = QListWidget()
        self.activities_list.setContextMenuPolicy(3)  # ContextMenuPolicy.CustomContextMenu
        self.activities_list.customContextMenuRequested.connect(self.show_context_menu)
        self.activities_list.itemClicked.connect(self.show_activity_details)

        self.new_activity_button = QPushButton("New Activity")
        self.new_activity_button.clicked.connect(self.show_add_activity_dialog)

        layout = QVBoxLayout()
        layout.addWidget(self.get_activities_button)
        layout.addWidget(self.activities_list)
        layout.addWidget(self.new_activity_button)

        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)
        self.get_activities()

    def get_activities(self):
        response = requests.get(f"{API_BASE_URL}/raw")
        if response.status_code == requests.codes.OK:
            self.json_response = response.json()
            self.activities_list.clear()
            for activity in self.json_response:
                title = activity['title']
                self.activities_list.addItem(title)

    def show_activity_details(self, item):
        title = item.text()
        activity = self.get_activity_by_title(title)
        if activity:
            details_window = ActivityDetailsWindow(activity)
            details_window.exec_()
            self.get_activities()

    def show_context_menu(self, position):
        menu = QMenu(self.activities_list)

        delete_action = QAction("Delete", self)
        delete_action.triggered.connect(self.delete_activity)

        menu.addAction(delete_action)
        menu.exec_(self.activities_list.mapToGlobal(position))

    def get_activity_by_title(self, title):
        for activity in self.json_response:
            if activity['title'] == title:
                return activity
        return None

    def delete_activity(self):
        selected_items = self.activities_list.selectedItems()
        if selected_items:
            selected_item = selected_items[0]
            title = selected_item.text()
            activity = self.get_activity_by_title(title)

            if activity:
                id = activity['id']
                response = requests.delete(f"{API_BASE_URL}/delete/{id}")
                if response.status_code == requests.codes.OK:
                    self.activities_list.takeItem(self.activities_list.row(selected_item))
                    print("TODO deleted successfully!")
                    self.update_ids(id)
                else:
                    print("Failed to delete TODO.")

    def update_ids(self, removed_id):
        for activity in self.json_response:
            if activity['id'] > removed_id:
                activity['id'] -= 1

    def show_add_activity_dialog(self):
        dialog = AddActivityDialog(self)
        dialog.exec_()
        self.get_activities()


class ActivityDetailsWindow(QDialog):
    def __init__(self, activity):
        super().__init__()

        self.setWindowTitle("Activity Details")
        self.activity = activity

        self.title_label = QLabel(f"Title: {activity['title']}")
        self.description_label = QLabel(f"Description: {activity['description']}")
        self.due_date_label = QLabel(f"Due Date: {activity['dueDate']}")
        self.done_label = QLabel(f"Done: {activity['done']}")
        self.id_label = QLabel(f"ID: {activity['id']}")
        self.update_button = QPushButton("Update")
        self.update_button.clicked.connect(self.update_activity)
        self.copyJsonButton = QPushButton("Copy as JSON")
        self.copyJsonButton.clicked.connect(self.copy_json)

        layout = QVBoxLayout()
        layout.addWidget(self.title_label)
        layout.addWidget(self.description_label)
        layout.addWidget(self.due_date_label)
        layout.addWidget(self.done_label)
        layout.addWidget(self.id_label)
        layout.addWidget(self.copyJsonButton)
        layout.addWidget(self.update_button)

        self.setLayout(layout)
    
    def copy_json(self):
        json_content = json.dumps(self.activity, indent=4)
        clipboard = QApplication.clipboard()
        clipboard.setText(json_content)
        QMessageBox.information(self, "Copied", "JSON copied to clipboard.")
    
    def update_activity(self):
        act: Activity = Activity(self.activity['title'], self.activity['description'], self.activity['dueDate'], self.activity['done'], self.activity['id'])
        dialog = UpdateActivityDialog(None, act)
        dialog.exec_()
        self.activity = dialog.activity.json()
        self.update_labels()
    
    def update_labels(self):
        self.title_label.setText(f"Title: {self.activity['title']}")
        self.description_label.setText(f"Description: {self.activity['description']}")
        self.due_date_label.setText(f"Due Date: {self.activity['dueDate']}")
        self.done_label.setText(f"Done: {self.activity['done']}")


if __name__ == "__main__":
    # check if the server is running
    try:
        response = requests.get(f"{API_BASE_URL}/ping")
        if response.status_code == requests.codes.OK and response.text == "pong":
            print("Server is running.")
        else:
            print("Bad response from server.")
            sys.exit()
    except:
        print("Server is not running.")
        sys.exit()
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
